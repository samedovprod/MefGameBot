import random
import sys
from datetime import datetime, timedelta

from aiogram import types
from aiogram.filters import Command, ChatMemberUpdatedFilter, IS_NOT_MEMBER, IS_MEMBER
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ChatMemberUpdated


class Handlers:
    def __init__(self, router, db, bot):
        self.router = router
        self.db = db
        self.bot = bot
        self.command_mapping = {
            'start': self.start_command,
            'rules': self.rules_command,
            'admin': self.monkey_alarm,
            'getadmin': self.monkey_alarm,
            'free': self.monkey_alarm,
            'freeadmin': self.monkey_alarm,
            'help': self.help_command,
            'profile': self.profile_command,
            'drug': self.drug_command,
            'top': self.top_command,
            'take': self.take_command,
            'casino': self.casino,
            'give': self.give_command,
            'clancreate': self.create_clan,
            'deposit': self.deposit,
            'withdraw': self.withdraw,
            'clantop': self.clan_top,
            'clanbalance': self.clanbalance,
            'clanwar': self.clanwar,
            'clanowner': self.clan_owner,
            'claninfo': self.claninfo,
            'clanmembers': self.clanmembers,
            'claninvite': self.claninvite,
            'clankick': self.clankick,
            'clanleave': self.clanleave,
            'clandisband': self.clandisband,
            'clanaccept': self.clanaccept,
            'clandecline': self.clandecline,
            'find': self.drug_find,
            'banuser': self.banuser_command,
            'unbanuser': self.unbanuser_command,
            'setdrugs': self.setdrugs_command,
            'usercount': self.usercount,
            'broadcast': self.cmd_broadcast_start,

        }
        self.register_handlers()

    def register_handlers(self):
        for command, handler in self.command_mapping.items():
            self.router.message(Command(command))(handler)
        self.router.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))(self.add_chat)

    @staticmethod
    async def monkey_alarm(message):
        await message.reply("üö® *MONKEY ALARM*", parse_mode='markdown')

    @staticmethod
    async def start_command(message):
        await message.reply(
            "üëã *–ó–¥–∞—Ä–æ–≤–∞ —à–Ω—ã—Ä*, —ç—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã *—Å—á–∏—Ç–∞—Ç—å* —Å–∫–æ–ª—å–∫–æ *–≥—Ä–∞–º–º –º–µ—Ñ–µ–¥—Ä–æ–Ω—á–∏–∫–∞* —Ç—ã —Å–Ω—é—Ö–∞–ª")

    @staticmethod
    async def rules_command(message: types.Message):
        await message.reply('''–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MefMetrBot:
                          *1) –ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç–∏–Ω–≥ - –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –æ–±–Ω—É–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ *
                          *2) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª—é–±—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–æ—Ç–∞ - –±–∞–Ω –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ*
                          *3) –ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ —á–µ—Ä–µ–∑ —Ç–æ–ø –∫–ª–∞–Ω–æ–≤ –∏ —Ç–æ–ø —é–∑–µ—Ä–æ–≤ - –≤—ã–≥–æ–≤–æ—Ä, –ø–æ—Å–ª–µ –±–∞–Ω —Å –æ–±–Ω—É–ª–µ–Ω–∏–µ–º*
                          *4) –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ –≤–∞–ª—é—Ç—ã –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ - –æ–±–Ω—É–ª–µ–Ω–∏–µ –∏ –±–∞–Ω*

                          *–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –í—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã. 
                          –°–æ–∑–¥–∞—Ç–µ–ª–∏ –Ω–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä—É—é—Ç –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏ –∏ –ø—Ä–æ—Ç–∏–≤ –∏—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è. 
                          –£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–∞–∂–∞ —è–≤–ª—è–µ—Ç—Å—è —É–≥–æ–ª–æ–≤–Ω–æ –Ω–∞–∫–∞–∑—É–µ–º–æ–π*
                          *–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º* (*–∫–æ–º–∞–Ω–¥–∞* `/about`)''', parse_mode='markdown')

    @staticmethod
    async def help_command(message: types.Message):
        await message.reply('''–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

                `/drug` - *–ø—Ä–∏–Ω—è—Ç—å –º–µ—Ñ–∏–∫*
                `/top` - *—Ç–æ–ø —Ç–æ—Ä—á–µ–π –º–∏—Ä–∞*
                `/take` - *—Å–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ–∏–∫ —É –±–ª–∏–∂–Ω–µ–≥–æ*
                `/give` - *–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Ñ–∏–∫–æ–º*
                `/casino` - *–∫–∞–∑–∏–Ω–æ*
                `/find` - *—Å—Ö–æ–¥–∏—Ç—å –∑–∞ –∫–ª–∞–¥–æ–º*
                `/about` - *—É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ*
                `/clancreate` - *—Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω*
                `/deposit` - *–ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞*
                `/withdraw` - *–≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –∫–ª–∞–Ω–∞*
                `/clantop` - *—Ç–æ–ø 10 –∫–ª–∞–Ω–æ–≤ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞*
                `/clanbalance` - *–±–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞*
                `/claninfo` - *–æ –∫–ª–∞–Ω–µ*
                `/claninvite` - *–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–ª–∞–Ω*
                `/clankick` - *–∫–∏–∫–Ω—É—Ç—å –∏–∑ –∫–ª–∞–Ω–∞*
                `/clanaccept` - *–ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω*
                `/clandecline` - *–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–ª–∞–Ω*
                `/clanleave` - *–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –∫–ª–∞–Ω–∞*
                `/clandisband` - *—Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞–Ω*
                    ''', parse_mode='markdown')

    async def add_chat(self, update: ChatMemberUpdated):
        if update.new_chat_member.user.id == self.bot.id and update.new_chat_member.status == 'member':
            self.db.add_chat(update.chat.id)
            await self.bot.send_message(
                update.chat.id,
                f"#NEWCHAT\n\nchatid: `{update.chat.id}`",
                parse_mode='markdown'
            )

        # @dp.message_handler(commands=['casino'])
        # async def start_command(message: types.Message):
        #     await message.reply("‚ùå *–†–µ–∑–µ—Ä–≤ –∫–∞–∑–∏–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∂–µ!*", parse_mode='markdown')

    @staticmethod
    async def check_banned(user, message):
        if user and user[4] == 1:
            await message.reply('üõë –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!')
            return True
        return False

    def get_user_info(self, message):
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
        else:
            user_id = message.from_user.id
        return self.db.get_user(user_id)

    async def profile_command(self, message: types.Message):
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
        else:
            user_id = message.from_user.id

        user = self.db.get_user(user_id)
        if not user:
            await message.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return

        drug_count = user[1]
        is_admin = user[3]
        clan_member = user[7]
        clan_name = self.db.get_clan_by_name(clan_member) if clan_member else None

        if user_id == message.from_user.id:
            username = message.from_user.username.replace('_', '\_') if message.from_user.username else None
            full_name = message.from_user.full_name
        else:
            username = message.reply_to_message.from_user.username.replace('_',
                                                                           '\_') if message.reply_to_message.from_user.username else None
            full_name = message.reply_to_message.from_user.full_name

        if is_admin == 1:
            if clan_member:
                await message.reply(
                    f"üëë *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä*\nüë§ *–ò–º—è:* _{full_name}_\nüë• *–ö–ª–∞–Ω:* *{clan_name}*\nüë• *Username "
                    f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* @{username}\nüÜî *ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* `{user_id}`\nüåø *–°–Ω—é—Ö–∞–Ω–æ* _{drug_count}_ "
                    f"–≥—Ä–∞–º–º.",
                    parse_mode='markdown')
            else:
                await message.reply(
                    f"üëë *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä*\nüë§ *–ò–º—è:* _{full_name}_\nüë• *Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* @{username}\nüÜî "
                    f"*ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* `{user_id}`\nüåø *–°–Ω—é—Ö–∞–Ω–æ* _{drug_count}_ –≥—Ä–∞–º–º.",
                    parse_mode='markdown')
        else:
            if clan_member:
                await message.reply(
                    f"üë§ *–ò–º—è:* _{full_name}_\nüë• *–ö–ª–∞–Ω:* *{clan_name}*\nüë• *Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* @{username}\nüÜî *ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* `{user_id}`\nüåø *–°–Ω—é—Ö–∞–Ω–æ* _{drug_count}_ –≥—Ä–∞–º–º.",
                    parse_mode='markdown')
            else:
                await message.reply(
                    f"üë§ *–ò–º—è:* _{full_name}_\nüë• *Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* @{username}\nüÜî *ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: * `{user_id}`\nüåø *–°–Ω—é—Ö–∞–Ω–æ* _{drug_count}_ –≥—Ä–∞–º–º.",
                    parse_mode='markdown')

    async def drug_command(self, message: types.Message, state: FSMContext):
        format = '%Y-%m-%d %H:%M:%S.%f'
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        drug_count = user[1] if user else 0
        last_use_time = user[2] if user else 0
        is_admin = user[3] if user else 0
        is_banned = user[4] if user else 0
        use_time = datetime.strptime(last_use_time, format) if user else 0
        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            if last_use_time and (datetime.now() - use_time) < timedelta(hours=1):
                remaining_time = timedelta(hours=1) - (datetime.now() - use_time)
                await message.reply(
                    f"‚ùå *{message.from_user.first_name}*, _—Ç—ã —É–∂–µ –Ω—é—Ö–∞–ª(-–∞)!_\n\nüåø –í—Å–µ–≥–æ —Å–Ω—é—Ö–∞–Ω–æ `{drug_count} –≥—Ä–∞–º–º` "
                    f"–º–µ—Ñ–µ–¥—Ä–æ–Ω–∞\n\n‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–Ω—é—Ö –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ `1 —á–∞—Å.`",
                    parse_mode='markdown')
            elif random.randint(0, 100) < 20:
                if last_use_time and (datetime.now() - use_time) < timedelta(hours=1):
                    remaining_time = timedelta(hours=1) - (datetime.now() - use_time)
                    await message.reply(
                        f"üßÇ *{message.from_user.first_name}*, _—Ç—ã –ø—Ä–æ—Å—ã–ø–∞–ª(-–∞) –≤–µ—Å—å –º–µ—Ñ—á–∏–∫!_\n\nüåø –í—Å–µ–≥–æ —Å–Ω—é—Ö–∞–Ω–æ `{drug_count}` –≥—Ä–∞–º–º –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞\n\n‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–Ω—é—Ö –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ `1 —á–∞—Å.`",
                        parse_mode='markdown')
                    self.db.update_last_use_time(user_id, datetime.now())
            else:
                count = random.randint(1, 10)
                if user:
                    self.db.update_drug_count(user_id, count)
                else:
                    self.db.create_user(user_id, drug_count=count)
                self.db.update_last_use_time(user_id, datetime.now())
                await message.reply(
                    f"üëç *{message.from_user.first_name}*, _—Ç—ã –∑–∞–Ω—é—Ö–Ω—É–ª(-–∞) {count} –≥—Ä–∞–º–º –º–µ—Ñ—á–∏–∫–∞!_\n\nüåø –í—Å–µ–≥–æ —Å–Ω—é—Ö–∞–Ω–æ `{drug_count + count}` –≥—Ä–∞–º–º –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞\n\n‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–Ω—é—Ö –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ `1 —á–∞—Å.`",
                    parse_mode='markdown')

    async def top_command(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_banned = user[4] if user else 0
        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            top_users = self.db.get_top_users()
            if top_users:
                response = "üîù–¢–û–ü 10 –õ–Æ–¢–´–• –ú–ï–§–ï–ù–î–†–û–ù–©–ò–ö–û–í –í –ú–ò–†–ïüîù:\n"
                counter = 1
                for user in top_users:
                    user_id = user[0]
                    if user_id == self.bot.id:
                        continue
                    drug_count = user[1]
                    user_info = await self.bot.get_chat(user_id)
                    response += f"{counter}) *{user_info.full_name}*: `{drug_count} –≥—Ä. –º–µ—Ñ–∞`\n"
                    counter += 1
                await message.reply(response, parse_mode='markdown')
            else:
                await message.reply('–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª –º–µ—Ñ.')

    async def take_command(self, message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_banned = user[4] if user else 0
        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            reply_msg = message.reply_to_message
            if reply_msg and reply_msg.from_user.id == self.bot.id:
                await message.reply(f'‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –º–µ—Ñ —É –±–æ—Ç–∞')
                return
            elif reply_msg and reply_msg.from_user.id != message.from_user.id:
                user_id = reply_msg.from_user.id
                user = self.db.get_user(user_id)
                your_user_id = message.from_user.id
                your_user = self.db.get_user(your_user_id)
                if user and your_user:
                    drug_count = user[1]
                    your_drug_count = your_user[1]
                    if drug_count > 1 and your_drug_count > 1:
                        last_time = await state.get_data()
                        if last_time and (datetime.now() - last_time['time']) < timedelta(days=1):
                            remaining_time = timedelta(days=1) - (datetime.now() - last_time['time'])
                            await message.reply(
                                f"‚ùå –ù–µ–ª—å–∑—è –ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ —Ç–∞–∫ —á–∞—Å—Ç–æ! –¢—ã —Å–º–æ–∂–µ—à—å —Å–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å.")
                        else:
                            variables = ['noticed', 'hit', 'pass']
                            randomed = random.choice(variables)
                            if randomed == 'noticed':
                                self.db.update_user(your_user_id, drug_count=-1)
                                await message.reply(
                                    '‚ùå *–ñ–µ—Ä—Ç–≤–∞ —Ç–µ–±—è –∑–∞–º–µ—Ç–∏–ª–∞*, –∏ —Ç—ã —Ä–µ—à–∏–ª —É–±–µ–∂–∞—Ç—å. –°–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. –ü–æ–∫–∞ —Ç—ã '
                                    '–±–µ–∂–∞–ª, *—Ç—ã –ø–æ—Ç–µ—Ä—è–ª* `1 –≥—Ä.`',
                                    parse_mode='markdown')
                            elif randomed == 'hit':
                                self.db.update_user(your_user_id, drug_count=-1)
                                await message.reply(
                                    '‚ùå *–ñ–µ—Ä—Ç–≤–∞ —Ç–µ–±—è –∑–∞–º–µ—Ç–∏–ª–∞*, –∏ –ø–∏–∑–¥–∞–Ω—É–ª–∞ —Ç–µ–±—è –±—É—Ç—ã–ª–∫–æ–π –ø–æ –±–∞—à–∫–µ –±–ª—è. –°–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ –Ω–µ '
                                    '–ø–æ–ª—É—á–∏–ª–æ—Å—å. *–ñ–µ—Ä—Ç–≤–∞ –¥–æ—Å—Ç–∞–ª–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–∞—Ä–º–∞–Ω–∞* `1 –≥—Ä.`',
                                    parse_mode='markdown')

                            elif randomed == 'pass':
                                self.db.update_user(user_id, drug_count=-1)
                                self.db.update_user(your_user_id, drug_count=1)
                                if reply_msg.from_user.username:
                                    username = reply_msg.from_user.username.replace('_', '\_')
                                else:
                                    username = f'[{reply_msg.from_user.first_name}](tg://user?id={reply_msg.from_user.id})'
                                await message.reply(
                                    f"‚úÖ [{message.from_user.first_name}](tg://user?id={message.from_user.id}) _—Å–ø–∏–∑–¥–∏–ª("
                                    f"-–∞) –æ–¥–∏–Ω –≥—Ä–∞–º –º–µ—Ñ–∞ —É_ @{username}!",
                                    parse_mode='markdown')
                            await state.set_data({'time': datetime.now()})
                    elif drug_count < 1:
                        await message.reply('‚ùå –£ –∂–µ—Ä—Ç–≤—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω—é—Ö–∞–Ω–Ω–æ–≥–æ –º–µ—Ñ–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –µ–≥–æ —Å–ø–∏–∑–¥–∏—Ç—å')
                    elif your_drug_count < 1:
                        await message.reply('‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω—é—Ö–∞–Ω–Ω–æ–≥–æ –º–µ—Ñ–∞ –¥–ª—è —Ç–æ–≥–æ –ø–æ–π—Ç–∏ –∏—Å–∫–∞—Ç—å –∂–µ—Ä—Ç–≤—É')
                else:
                    await message.reply('‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω—é—Ö–∞–ª –º–µ—Ñ')
            else:
                await message.reply('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ–µ–¥—Ä–æ–Ω.')

    async def casino(self, message: types.Message):
        args = message.text.split(maxsplit=1)
        user_id = message.from_user.id
        user = self.db.get_user(user_id)

        if not user:
            await message.reply('üõë –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return

        if user[4]:
            await message.reply('üõë –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.')
            return

        if len(args) < 2:
            await message.reply("üõë –£–∫–∞–∂–∏ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ç—ã –±—ã —Ö–æ—Ç–µ–ª —Å—ã–≥—Ä–∞—Ç—å! –ü—Ä–∏–º–µ—Ä:\n`/casino 40`",
                                parse_mode='markdown')
            return

        try:
            bet = int(args[1])
            if bet < 1:
                await message.reply("üõë –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", parse_mode='markdown')
                return
        except ValueError:
            await message.reply("üõë –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!", parse_mode='markdown')
            return

        drug_count = user[1]
        if bet > drug_count:
            await message.reply("üõë –¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ –±–æ–ª—å—à–µ —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞!", parse_mode='markdown')
            return

        last_used = user[5]
        if last_used and (datetime.now() - datetime.fromisoformat(last_used)).total_seconds() < 30:
            await message.reply('‚è≥ –¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ *–∫—Ä—É—Ç–∏–ª –∫–∞–∑–∏–∫*, —Å–æ–ª–µ–≤–∞—è –æ–±–µ–∑—å—è–Ω–∞, *–ø–æ–¥–æ–∂–¥–∏ 30 —Å–µ–∫—É–Ω–¥ –ø–æ –±—Ä–∞—Ç—Å–∫–∏.*',
                                parse_mode='markdown')
            return

        randomed = random.randint(1, 100)
        multipliers = [2, 1.5, 1.25, 1.1, 0]
        weights = [1, 2, 3, 4, 90]
        multiplier = random.choices(multipliers, weights=weights)[0]

        if multiplier:
            win_amount = round(bet * multiplier, 1)
            self.db.update_user(user_id, drug_count=drug_count + win_amount - bet)
            await message.reply(
                f'ü§ë *–ï–±–∞—Ç—å —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ!* –¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ *—É–º–Ω–æ–∂–∏–ª–∞—Å—å* –Ω–∞ `{multiplier}`. –¢–≤–æ–π –≤—ã–∏–≥—Ä—ã—à: `{win_amount}` –≥—Ä.',
                parse_mode='markdown')
        else:
            self.db.update_user(user_id, drug_count=drug_count - bet)
            await message.reply('üòî *–¢—ã –ø—Ä–æ–µ–±–∞–ª* —Å–≤–æ—é —Å—Ç–∞–≤–∫—É, *–Ω–µ—Ö—É–π –±—ã–ª–æ* –∫—Ä—É—Ç–∏—Ç—å –∫–∞–∑–∏–∫.', parse_mode='markdown')

        self.db.update_user(user_id, last_casino=datetime.now().isoformat())

    async def give_command(self, message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        if not user or user[4]:
            await message.reply('üõë –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
            return

        args = message.text.split(maxsplit=1)
        if not args:
            await message.reply('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏')
            return

        try:
            value = int(args[0])
            if value <= 0:
                await message.reply(f'‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
                return
        except ValueError:
            await message.reply(f'‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
            return

        reply_msg = message.reply_to_message
        if not reply_msg or reply_msg.from_user.id == user_id or reply_msg.from_user.id == self.bot.id:
            await message.reply(f'‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å')
            return

        recipient_id = reply_msg.from_user.id
        recipient = self.db.get_user(recipient_id)
        if not recipient:
            await message.reply(f'‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω!')
            return

        your_drug_count = user[1]
        if your_drug_count < value:
            await message.reply(f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä–∞–º–º–æ–≤ –º–µ—Ñ–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏')
            return

        commission = round(value * 0.10)
        net_value = value - commission
        botbalance = self.db.get_user(self.bot.id)[1]

        self.db.update_user(recipient_id, drug_count=net_value)
        self.db.update_user(user_id, drug_count=-value)
        self.db.update_user(self.bot.id, drug_count=botbalance + commission)

        await self.bot.send_message(message.chat.id,
                                    f"#GIVE\n\nfirst\_name: `{message.from_user.first_name}`\nuserid: `{user_id}`\nto: `{reply_msg.from_user.first_name}`\nvalue: `{net_value}`",
                                    parse_mode='markdown')

        if reply_msg.from_user.username:
            username_mention = f"[{reply_msg.from_user.first_name}](tg://user?id={recipient_id})"
        else:
            username_mention = reply_msg.from_user.first_name

        await message.reply(
            f"‚úÖ [{message.from_user.first_name}](tg://user?id={message.from_user.id}) –ø–æ–¥–∞—Ä–∏–ª(-–∞) {value} –≥—Ä. –º–µ—Ñ–∞ {username_mention}!\n"
            f"–ö–æ–º–∏—Å—Å–∏—è: `{commission}` –≥—Ä. –º–µ—Ñ–∞\n–ü–æ–ª—É—á–µ–Ω–æ `{net_value}` –≥—Ä. –º–µ—Ñ–∞.",
            parse_mode='markdown')

        await state.set_data({'time': datetime.now()})

    async def create_clan(self, message: types.Message):
        args = message.text.split(maxsplit=1)
        user_id = message.from_user.id
        user = self.db.get_user(user_id)

        if not user:
            await message.reply('üõë –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return

        if user[4]:
            await message.reply('üõë –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ.')
            return

        if len(args) < 2:
            await message.reply("üõë –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞. –ü—Ä–∏–º–µ—Ä: `/clancreate –ö–ª–∞–Ω–ù–∞–∑–≤–∞–Ω–∏–µ`",
                                parse_mode='markdown')
            return

        clan_name = args[1]
        clanexist = self.db.get_clan_by_name(clan_name)
        if clanexist:
            await message.reply('üõë –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
            return

        if user[7]:
            await message.reply('üõë –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.')
            return

        drug_count = user[1] or 0
        if drug_count < 100:
            await message.reply("üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º `100` –≥—Ä.")
            return

        clan_id = random.randint(100000, 999999)
        self.db.create_clan(clan_id, clan_name, user_id, 0)
        self.db.update_user(user_id, clan_member=clan_id, drug_count=drug_count - 100)
        await self.bot.send_message(
            message.chat.id,
            f"#NEWCLAN\n\nclanid: `{clan_id}`\nclanname: `{clan_name}`\nclanownerid: `{user_id}`",
            parse_mode='markdown')
        await message.reply(
            f"‚úÖ –ö–ª–∞–Ω `{clan_name}` —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∞–Ω–∞: `{clan_id}`. –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ `100` –≥—Ä.",
            parse_mode='markdown')

    async def deposit(self, message: types.Message):
        args = message.text.split(maxsplit=1)
        user_id = message.from_user.id
        user = self.db.get_user(user_id)

        if not user or user[4]:
            await self.check_banned(user, message)
            return

        if len(args) < 2:
            await message.reply(f"üõë –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä:\n`/deposit 100`", parse_mode='markdown')
            return

        try:
            cost = int(args[1])
            if cost <= 0:
                await message.reply(f'‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –∏ –Ω–µ —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é')
                return
        except ValueError:
            await message.reply(f'‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
            return

        user_balance = user[1]
        clan_id = user[7]

        if clan_id == 0:
            await message.reply(f"üõë –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ", parse_mode='markdown')
            return

        clan = self.db.get_clan_by_id(clan_id)
        if not clan:
            await message.reply(f"üõë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", parse_mode='markdown')
            return

        clan_balance = clan[3]
        clan_name = clan[1]
        clan_owner_id = clan[2]

        if cost > user_balance:
            await message.reply(f"üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: `{user_balance}` –≥—Ä.", parse_mode='markdown')
            return

        new_clan_balance = clan_balance + cost
        self.db.update_clan_balance_by_owner(clan_owner_id, new_clan_balance)
        self.db.update_user(user_id, drug_count=user_balance - cost)

        await message.reply(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞ `{clan_name}` –Ω–∞ `{cost}` –≥—Ä.",
                            parse_mode='markdown')
        await self.bot.send_message(
            message.chat.id,
            f"#DEPOSIT\n\nclanname: `{clan_name}`\namount: `{cost}`\nuserid: `{user_id}`\nfirstname: {message.from_user.first_name}\n\n[mention](tg://user?id={user_id})",
            parse_mode='markdown'
        )

    async def withdraw(self, message: types.Message):
        args = message.text.split()
        user_id = message.from_user.id
        user = self.db.get_user(user_id)

        if not user or user[4]:
            await self.check_banned(user, message)
            return

        if not args:
            await message.reply(f"üõë –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä:\n`/withdraw 100`", parse_mode='markdown')
            return

        try:
            cost = int(args[0])
            if cost <= 0:
                await message.reply(f'‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
                return
        except ValueError:
            await message.reply(f'‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
            return

        clan_id = user[1]
        if clan_id == 0:
            await message.reply(f"üõë –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ", parse_mode='markdown')
            return

        clan = self.db.get_clan_by_id(clan_id)
        if not clan:
            await message.reply(f"üõë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", parse_mode='markdown')
            return

        clan_balance, clan_name, clan_owner_id = clan[3], clan[1], clan[2]
        if user_id != clan_owner_id:
            await message.reply(f"üõë –°–Ω–∏–º–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å–æ —Å—á—ë—Ç–∞ –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –µ–≥–æ –≤–ª–∞–¥–µ–ª–µ—Ü.", parse_mode='markdown')
            return

        if cost > clan_balance:
            await message.reply(f"üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞: `{clan_balance}` –≥—Ä.", parse_mode='markdown')
            return

        self.db.update_clan_balance_by_owner(user_id, clan_balance - cost)
        self.db.update_user(user_id, drug_count=user[0] + cost)

        await message.reply(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ `{cost}` –≥—Ä. –º–µ—Ñ–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞–Ω–∞ `{clan_name}`",
            parse_mode='markdown')
        await self.bot.send_message(message.chat.id,
                                    f"#WITHDRAW\n\namount: `{cost}`\nclanname: `{clan_name}`\nuserid: {user_id}\n\n[mention](tg://user?id={user_id})",
                                    parse_mode='markdown')

    async def clan_top(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_banned = user[4] if user else 0
        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            top_clans = self.db.get_top_clans()
            if top_clans:
                response = "üîù–¢–û–ü 10 –ú–ï–§–ï–î–†–û–ù–û–í–´–• –ö–ê–†–¢–ï–õ–ï–ô –í –ú–ò–†–ïüîù:\n"
                counter = 1
                for clan in top_clans:
                    clan_name = clan[0]
                    clan_balance = clan[1]
                    response += f"{counter}) *{clan_name}*  `{clan_balance} –≥—Ä. –º–µ—Ñ–∞`\n"
                    counter += 1
                await message.reply(response, parse_mode='markdown')
            else:
                await message.reply('üõë –ï—â—ë –Ω–∏ –æ–¥–∏–Ω –∫–ª–∞–Ω –Ω–µ –ø–æ–ø–æ–ª–Ω–∏–ª —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.')

    async def clanbalance(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_banned = user[4] if user else 0
        clan_id = user[7] if user else 0
        clan = self.db.get_clan_by_id(clan_id)
        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            if clan_id == 0:
                await message.reply(f"üõë –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ", parse_mode='markdown')
            elif clan_id > 0:
                clan_balance = clan[3]
                clan_name = clan[1]
                await message.reply(f'‚úÖ –ë–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞ *{clan_name}* - `{clan_balance}` –≥—Ä.', parse_mode='markdown')

    async def clanwar(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_banned = user[4] if user else 0
        clan_id = user[7] if user else 0
        clan = self.db.get_clan_by_id(clan_id)
        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            if clan_id == 0:
                await message.reply(f"üõë *–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ*", parse_mode='markdown')
            elif clan_id > 0:
                clan_name = clan[1]
                clan_owner_id = clan[2]
                if user_id != clan_owner_id:
                    await message.reply(f"üõë *–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞*", parse_mode='markdown')
                    return
                if len(message.text.split()) < 2:
                    await message.reply(f"üõë *–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∞–Ω–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ–π–Ω—ã*",
                                        parse_mode='markdown')
                    return
                target_clan_id = message.text.split()[1]
                target_clan = self.db.get_clan_by_id(target_clan_id)
                if not target_clan:
                    await message.reply(f"üõë *–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∞–Ω —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º*",
                                        parse_mode='markdown')
                    return
                target_clan_name = target_clan[1]
                await message.reply(f"*–ö–ª–∞–Ω {clan_name} –Ω–∞—á–∞–ª –≤–æ–π–Ω—É —Å {target_clan_name}!*", parse_mode='markdown')
                chats = self.db.get_all_chats()
                for chat_id in chats:
                    try:
                        await self.bot.send_message(chat_id[0],
                                                    f"*–ö–ª–∞–Ω {clan_name} –Ω–∞—á–∞–ª –≤–æ–π–Ω—É —Å {target_clan_name}!*",
                                                    parse_mode='markdown')
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}")

    async def clan_owner(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_banned = user[4] if user else 0
        clan_id = user[7] if user else 0
        clan = self.db.get_clan_by_id(clan_id)
        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            if clan_id == 0:
                await message.reply(f"üõë *–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ*", parse_mode='markdown')
            elif clan_id > 0:
                current_owner_id = clan[2]
                if user_id != current_owner_id:
                    await message.reply(f"üõë *–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞*", parse_mode='markdown')
                    return
                if message.reply_to_message:
                    new_owner_id = message.reply_to_message.from_user.id
                elif len(message.text.split()) >= 2:
                    new_owner_id = int(message.text.split()[1])
                else:
                    await message.reply(f"üõë *–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–ª–∞–Ω–∞*", parse_mode='markdown')
                    return
                new_owner = self.db.get_user(new_owner_id)
                if not new_owner:
                    await message.reply(f"üõë *–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º*",
                                        parse_mode='markdown')
                    return
                self.db.update_clan_owner(clan_id, new_owner_id)
                await message.reply(f"‚úÖ *–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–ª–∞–Ω–∞!*", parse_mode='markdown')

    async def claninfo(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_banned = user[4] if user else 0
        clan_id = user[7] if user else 0
        clan = self.db.get_clan_by_id(clan_id)
        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            if clan_id == 0:
                await message.reply(f"üõë –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ", parse_mode='markdown')
            elif clan_id > 0:
                clan_balance = clan[0]
                clan_name = clan[1]
                clan_owner_id = clan[2]
                clan_owner = await self.bot.get_chat(clan_owner_id)
                await message.reply(
                    f"üë• –ö–ª–∞–Ω: `{clan_name}`\nüëë –í–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞: [{clan_owner.first_name}](tg://user?id={clan_owner_id})\nüåø –ë–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞ `{clan_balance}` –≥—Ä.",
                    parse_mode='markdown')

    async def clanmembers(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_banned = user[4] if user else 0

        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            clan_id = user[7] if user else 0
            clan_members = self.db.get_clan_members(clan_id)
            clan = self.db.get_clan_by_id(clan_id)
            if clan:
                clan_name = clan[0]
                clan_owner_id = clan[1]
                if clan_id > 0:
                    if clan_members:
                        response = f"üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞ *{clan_name}*:\n"
                        counter = 1
                        clan_owner = None
                        for member in clan_members:
                            if member[0] == clan_owner_id:
                                clan_owner = member
                                break
                        if clan_owner:
                            user_info = await self.bot.get_chat(clan_owner[0])
                            response += f"{counter}) *{user_info.full_name}* üëë\n"
                            counter += 1
                        for member in clan_members:
                            if member[0] != clan_owner_id:
                                user_info = await self.bot.get_chat(member[0])
                                response += f"{counter}) {user_info.full_name}\n"
                                counter += 1
                        await message.reply(response, parse_mode='markdown')
            else:
                await message.reply(f"üõë –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ", parse_mode='markdown')

    async def claninvite(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_banned = user[4] if user else 0
        clan_id = user[7] if user else 0
        clan = self.db.get_clan_by_id(clan_id)
        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            if clan:
                clan_name = clan[1]
                clan_owner_id = clan[2]
                if user_id == clan_owner_id:
                    reply_msg = message.reply_to_message
                    if reply_msg and reply_msg.from_user.id == self.bot.id:
                        await message.reply(f'‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–ª–∞–Ω')
                        return
                    elif reply_msg:
                        invited_user_id = reply_msg.from_user.id
                        invited_user = self.db.get_user(invited_user_id)
                        clan_member = invited_user[7]
                        clan_invite = invited_user[8]

                        if clan_member == 0 and clan_invite == 0:
                            self.db.update_user(invited_user_id, clan_invite=clan_id)
                            await message.reply(
                                f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reply_msg.from_user.first_name} *–ø—Ä–∏–≥–ª–∞—à—ë–Ω –≤ –∫–ª–∞–Ω {clan_name}* '
                                f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.first_name}\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, '
                                f'*–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É* `/clanaccept`\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, '
                                f'*–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É* `/clandecline`',
                                parse_mode='markdown')
                        elif clan_invite > 0:
                            await message.reply(f"üõë –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ",
                                                parse_mode='markdown')
                        elif clan_member > 0:
                            await message.reply(f"üõë –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–ª–∞–Ω–µ", parse_mode='markdown')
                else:
                    await message.reply(f"üõë –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –≤ –∫–ª–∞–Ω –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å", parse_mode='markdown')
            else:
                await message.reply(f"üõë {sys.exc_info()[0]}")

    async def clankick(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_banned = user[4] if user else 0
        clan_id = user[7] if user else 0
        clan = self.db.get_clan_by_id(clan_id)
        clan_name = clan[1]
        clan_owner_id = int(clan[2])
        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            if clan_id == 0:
                await message.reply(f"üõë –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ", parse_mode='markdown')
            elif clan_id > 0 and user_id == clan_owner_id:
                reply_msg = message.reply_to_message
                if reply_msg:
                    kicked_user_id = reply_msg.from_user.id
                    self.db.update_user(kicked_user_id, clan_member=0)
                    await message.reply(
                        f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{reply_msg.from_user.username} *–∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–ª–∞–Ω–∞ {clan_name}* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{message.from_user.username}',
                        parse_mode='markdown')
            else:
                await message.reply(f"üõë –ò—Å–∫–ª—é—á–∞—Ç—å –∏–∑ –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å", parse_mode='markdown')

    async def clanleave(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_banned = user[4] if user else 0
        clan_id = user[7] if user else 0
        clan = self.db.get_clan_by_id(clan_id)
        clan_name = clan[1]
        clan_owner_id = int(clan[2])
        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            if clan_id == 0:
                await message.reply(f"üõë –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ", parse_mode='markdown')
            elif clan_id > 0 and user_id != clan_owner_id:
                self.db.update_user(user_id, clan_member=0)
                await message.reply(f'‚úÖ *–í—ã –ø–æ–∫–∏–Ω—É–ª–∏* –∫–ª–∞–Ω *{clan_name}*', parse_mode='markdown')
            elif clan_id > 0 and user_id == clan_owner_id:
                await message.reply(f"üõë –°–æ–∑–¥–∞—Ç–µ–ª—å –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –µ–≥–æ –ø–æ–∫–∏–Ω—É—Ç—å", parse_mode='markdown')

    async def clandisband(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_banned = user[4] if user else 0
        clan_id = user[7] if user else 0
        clan = self.db.get_clan_by_id(clan_id)
        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            if clan_id > 0 and user_id == clan[2]:
                self.db.delete_clan(clan_id)
                self.db.update_users_with_clan_id(clan_id, clan_member=0, clan_invite=0)
                await message.reply(f'‚úÖ –í—ã —Ä–∞—Å–ø—É—Å—Ç–∏–ª–∏ –∫–ª–∞–Ω `{clan[1]}`', parse_mode='markdown')
            else:
                await message.reply(f"üõë –í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞!", parse_mode='markdown')

    async def clanaccept(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_banned = user[4] if user else 0
        clan_invite = user[8] if user else 0
        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            if clan_invite:
                clan = self.db.get_clan_by_id(clan_invite)
                self.db.update_user(user_id, clan_member=clan_invite, clan_invite=0)
                await message.reply(f'‚úÖ *–í—ã –ø—Ä–∏–Ω—è–ª–∏* –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω *{clan[1]}*', parse_mode='markdown')
            else:
                await message.reply('üõë –í—ã –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –∫–ª–∞–Ω')

    async def clandecline(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_banned = user[4] if user else 0
        clan_invite = user[8] if user else 0
        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            if clan_invite:
                clan = self.db.get_clan_by_id(clan_invite)
                self.db.update_user(user_id, clan_invite=0)
                await message.reply(f'‚ùå *–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏* –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω *{clan[1]}*', parse_mode='markdown')
            else:
                await message.reply('üõë –í—ã –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –∫–ª–∞–Ω')

    async def drug_find(self, message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        drug_count = user[1] if user else 0
        last_time = await state.get_data()
        last_used = user[6] if user else '2021-02-14 16:04:04.465506'
        is_banned = user[4] if user else 0
        if await self.check_banned(user, message):
            return
        elif is_banned == 0:
            if last_used is not None and (
                    datetime.now() - datetime.fromisoformat(last_used)).total_seconds() < 43200:
                await message.reply('‚è≥ –¢—ã –Ω–µ–¥–∞–≤–Ω–æ *—Ö–æ–¥–∏–ª –∑–∞ –∫–ª–∞–¥–æ–º, –ø–æ–¥–æ–∂–¥–∏ 12 —á–∞—Å–æ–≤.*', parse_mode='markdown')
                return
            else:
                if random.randint(1, 100) > 50:
                    count = random.randint(1, 10)
                    if user:
                        self.db.update_user(user_id, drug_count=drug_count + count)
                    else:
                        self.db.add_user(user_id, drug_count=count)
                    self.db.update_user(user_id, last_use_time='2006-02-20 12:45:37.666666',
                                        last_find=datetime.now().isoformat())
                    await self.bot.send_message(message.chat.id,
                                                f"#FIND #WIN\n\nfirst\_name: `{message.from_user.first_name}`\ncount: `{count}`\ndrug\_count: `{drug_count + count}`\n\n[mention](tg://user?id={user_id})",
                                                parse_mode='markdown')
                    await message.reply(
                        f"üëç {message.from_user.first_name}, —Ç—ã –ø–æ—à—ë–ª –≤ –ª–µ—Å –∏ *–Ω–∞—à–µ–ª –∫–ª–∞–¥*, —Ç–∞–º –ª–µ–∂–∞–ª–æ `{count} –≥—Ä.` "
                        f"–º–µ—Ñ—á–∏–∫–∞!\nüåø –¢–≤–æ–µ –≤—Ä–µ–º—è –∫–æ–º–∞–Ω–¥—ã /drug –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
                        parse_mode='markdown')
                elif random.randint(1, 100) <= 50:
                    count = random.randint(1, round(drug_count))
                    self.db.update_user(user_id, drug_count=drug_count - count)
                    await self.bot.send_message(message.chat.id,
                                                f"#FIND #LOSE\n\nfirst\_name: `{message.from_user.first_name}`\ncount: `{count}`\ndrug\_count: `{drug_count - count}`\n\n[mention](tg://user?id={user_id})",
                                                parse_mode='markdown')
                    await message.reply(
                        f"‚ùå *{message.from_user.first_name}*, —Ç–µ–±—è *—Å–ø–∞–ª–∏–ª –º–µ–Ω—Ç* –∏ *–¥–∞–ª —Ç–µ–±–µ –ø–æ –µ–±–∞–ª—É*\nüåø –¢–µ–±–µ –Ω—É–∂–Ω–æ "
                        f"–æ—Ç–∫—É–ø–∏—Ç—å—Å—è, –º–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–∏–ª –≤–∑—è—Ç–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ `{count} –≥—Ä.`\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ "
                        f"*12 —á–∞—Å–æ–≤.*",
                        parse_mode='markdown')

    async def banuser_command(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_admin = user[3]
        if is_admin == 1:
            bann_user_id = None
            reply_msg = message.reply_to_message
            if reply_msg and reply_msg.from_user.id != user_id:
                bann_user_id = reply_msg.from_user.id
            else:
                args = message.text.split()
                if len(args) > 1:
                    try:
                        bann_user_id = int(args[1])
                    except ValueError:
                        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
                        return

            if bann_user_id:
                self.db.update_user(bann_user_id, is_banned=1)
                await message.reply(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: `{bann_user_id}` –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", parse_mode='markdown')
                await self.bot.send_message(message.chat.id, f"#BAN\n\nid: {bann_user_id}")
            else:
                await message.reply('–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        else:
            await message.reply('üö® MONKEY ALARM')

    async def unbanuser_command(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_admin = user[3]
        if is_admin == 1:
            bann_user_id = None
            reply_msg = message.reply_to_message
            if reply_msg and reply_msg.from_user.id != user_id:
                bann_user_id = reply_msg.from_user.id
            else:
                args = message.text.split()
                if len(args) > 1:
                    try:
                        bann_user_id = int(args[1])
                    except ValueError:
                        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
                        return

            if bann_user_id:
                self.db.update_user(bann_user_id, is_banned=0)
                await message.reply(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: `{bann_user_id}` —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", parse_mode='markdown')
                await self.bot.send_message(message.chat.id, f"#UNBAN\n\nid: {bann_user_id}")
            else:
                await message.reply('–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        else:
            await message.reply('üö® MONKEY ALARM')

    async def setdrugs_command(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)

        if user[3] != 1:
            await message.reply('üö® MONKEY ALARM')
            return

        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            await message.reply(
                'üö® –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã. –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º.')
            return

        target_user_id, drug_amount = args[1], args[2]
        try:
            target_user_id = int(target_user_id)
            drug_amount = int(drug_amount)
        except ValueError:
            await message.reply('üö® –û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –¥–ª—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞–º–º.')
            return

        self.db.update_user(target_user_id, drug_count=drug_amount)
        await message.reply('‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º –æ–±–Ω–æ–≤–ª–µ–Ω–æ.')

    async def usercount(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_admin = user[3]
        user_count = len(self.db.get_top_users(limit=None))
        if is_admin == 1:
            await message.reply(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {user_count}')
        else:
            await message.reply('üö® MONKEY ALARM')

    async def cmd_broadcast_start(self, message: Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        is_admin = user[3]
        all_chats = self.db.get_all_chats()
        reply = message.reply_to_message
        if is_admin == 1:
            if reply:
                if reply.photo:
                    if reply.caption:
                        await message.reply('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É')
                        for chat_id in all_chats:
                            try:
                                await self.bot.send_photo(chat_id, reply.photo[-1].file_id,
                                                          caption=f"{reply.caption}",
                                                          parse_mode='markdown')
                            except:
                                await self.bot.send_message(message.chat.id,
                                                            f"#SENDERROR\n\nchatid: {chat_id}\nerror: {sys.exc_info()[0]}")
                                continue
                    else:
                        await message.reply('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É')
                        for chat_id in all_chats:
                            try:
                                await self.bot.send_photo(chat_id, reply.photo[-1].file_id)
                            except:
                                await self.bot.send_message(message.chat.id,
                                                            f"#SENDERROR\n\nchatid: {chat_id}\nerror: {sys.exc_info()[0]}")
                                continue
                elif reply.text:
                    await message.reply('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É')
                    for chat_id in all_chats:
                        try:
                            await self.bot.send_message(chat_id, f"{reply.text}", parse_mode='markdown')
                        except:
                            await self.bot.send_message(message.chat.id,
                                                        f"#SENDERROR\n\nchatid: {chat_id}\nerror: {sys.exc_info()[0]}")
                            continue
            else:
                await message.reply('–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
        else:
            await message.reply('üö® MONKEY ALARM')
