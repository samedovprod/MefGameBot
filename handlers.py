import logging
import random
from datetime import datetime, timedelta

from aiogram import types
from aiogram.filters import Command, ChatMemberUpdatedFilter, IS_NOT_MEMBER, IS_MEMBER
from aiogram.fsm.context import FSMContext
from aiogram.types import ChatMemberUpdated


class Handlers:
    def __init__(self, router, db, bot):
        self.router = router
        self.db = db
        self.bot = bot
        self.command_mapping = {
            'start': self.start_command,
            'rules': self.rules_command,
            'admin': self.monkey_alarm,
            'getadmin': self.monkey_alarm,
            'free': self.monkey_alarm,
            'freeadmin': self.monkey_alarm,
            'help': self.help_command,
            'profile': self.profile_command,
            'drug': self.drug_command,
            'top': self.top_command,
            'take': self.take_command,
            'casino': self.casino,
            'give': self.give_command,
            'clancreate': self.create_clan,
            'deposit': self.deposit,
            'withdraw': self.withdraw,
            'clantop': self.clan_top,
            'clanbalance': self.clanbalance,
            'clanwar': self.clanwar,
            'clanowner': self.clan_owner,
            'claninfo': self.claninfo,
            'clanmembers': self.clanmembers,
            'claninvite': self.claninvite,
            'clankick': self.clankick,
            'clanleave': self.clanleave,
            'clandisband': self.clandisband,
            'clanaccept': self.clanaccept,
            'clandecline': self.clandecline,
            'find': self.drug_find,
            'banuser': self.banuser_command,
            'unbanuser': self.unbanuser_command,
            'setdrugs': self.setdrugs_command,
            'usercount': self.usercount,
            'broadcast': self.cmd_broadcast_start,

        }
        self.register_handlers()

    def register_handlers(self):
        for command, handler in self.command_mapping.items():
            self.router.message(Command(command))(handler)
        self.router.chat_member(ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER))(self.add_chat)

    @staticmethod
    async def monkey_alarm(message):
        await message.reply("üö® *MONKEY ALARM*", parse_mode='markdown')

    @staticmethod
    async def start_command(message):
        await message.reply(
            "üëã *–ó–¥–∞—Ä–æ–≤–∞ —à–Ω—ã—Ä*, —ç—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã *—Å—á–∏—Ç–∞—Ç—å* —Å–∫–æ–ª—å–∫–æ *–≥—Ä–∞–º–º –º–µ—Ñ–µ–¥—Ä–æ–Ω—á–∏–∫–∞* —Ç—ã —Å–Ω—é—Ö–∞–ª")

    @staticmethod
    async def rules_command(message: types.Message):
        await message.reply('''–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MefGameBot:
                          *1) –ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç–∏–Ω–≥ - –±–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ –∏ –æ–±–Ω—É–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ *
                          *2) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª—é–±—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –±–æ—Ç–∞ - –±–∞–Ω –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ*
                          *3) –ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ —á–µ—Ä–µ–∑ —Ç–æ–ø –∫–ª–∞–Ω–æ–≤ –∏ —Ç–æ–ø —é–∑–µ—Ä–æ–≤ - –≤—ã–≥–æ–≤–æ—Ä, –ø–æ—Å–ª–µ –±–∞–Ω —Å –æ–±–Ω—É–ª–µ–Ω–∏–µ–º*
                          *4) –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ –≤–∞–ª—é—Ç—ã –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ - –æ–±–Ω—É–ª–µ–Ω–∏–µ –∏ –±–∞–Ω*

                          *–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –í—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã. 
                          –°–æ–∑–¥–∞—Ç–µ–ª–∏ –Ω–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Ä—É—é—Ç –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏ –∏ –ø—Ä–æ—Ç–∏–≤ –∏—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è. 
                          –£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–∞–∂–∞ —è–≤–ª—è–µ—Ç—Å—è —É–≥–æ–ª–æ–≤–Ω–æ –Ω–∞–∫–∞–∑—É–µ–º–æ–π*
                          *–°–æ–æ–±—â–∏—Ç—å –æ –±–∞–≥–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º* (*–∫–æ–º–∞–Ω–¥–∞* `/about`)''', parse_mode='markdown')

    @staticmethod
    async def help_command(message: types.Message):
        await message.reply('''–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

                `/drug` - *–ø—Ä–∏–Ω—è—Ç—å –º–µ—Ñ–∏–∫*
                `/top` - *—Ç–æ–ø —Ç–æ—Ä—á–µ–π –º–∏—Ä–∞*
                `/take` - *—Å–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ–∏–∫ —É –±–ª–∏–∂–Ω–µ–≥–æ*
                `/give` - *–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Ñ–∏–∫–æ–º*
                `/casino` - *–∫–∞–∑–∏–Ω–æ*
                `/find` - *—Å—Ö–æ–¥–∏—Ç—å –∑–∞ –∫–ª–∞–¥–æ–º*
                `/about` - *—É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ*
                `/clancreate` - *—Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω*
                `/deposit` - *–ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞*
                `/withdraw` - *–≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –∫–ª–∞–Ω–∞*
                `/clantop` - *—Ç–æ–ø 10 –∫–ª–∞–Ω–æ–≤ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞*
                `/clanbalance` - *–±–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞*
                `/claninfo` - *–æ –∫–ª–∞–Ω–µ*
                `/claninvite` - *–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–ª–∞–Ω*
                `/clankick` - *–∫–∏–∫–Ω—É—Ç—å –∏–∑ –∫–ª–∞–Ω–∞*
                `/clanaccept` - *–ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω*
                `/clandecline` - *–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–ª–∞–Ω*
                `/clanleave` - *–¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –∫–ª–∞–Ω–∞*
                `/clandisband` - *—Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞–Ω*
                    ''', parse_mode='markdown')

    async def add_chat(self, update: ChatMemberUpdated):
        logging.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è update: {update}")
        if update.new_chat_member.user.id == self.bot.id and update.new_chat_member.status == 'member':
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞: {update.chat.id}")
            self.db.add_chat(update.chat.id)
            await self.bot.send_message(
                update.chat.id,
                f"#NEWCHAT\n\nchatid: `{update.chat.id}`",
                parse_mode='markdown'
            )

    @staticmethod
    async def check_banned(user, message):
        if user and user[4] == 1:
            await message.reply('üõë –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!')
            return True
        return False

    async def profile_command(self, message: types.Message):
        user_id = message.reply_to_message.from_user.id if message.reply_to_message else message.from_user.id
        user = self.db.get_user(user_id)
        if not user:
            await message.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return

        username = f"@{user[5]}" if user[5] else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        clan_name = self.db.get_clan_name(user[7]) if user[7] else "–Ω–µ –≤ –∫–ª–∞–Ω–µ"
        status = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user[3] else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        profile_info = (f"{status}\nüë§ –ò–º—è: {user[6]}\n"
                        f"üë• –ö–ª–∞–Ω: {clan_name}\n"
                        f"üë• Username: {username}\n"
                        f"üÜî ID: {user_id}\n"
                        f"üåø –°–Ω—é—Ö–∞–Ω–æ: {user[1]} –≥—Ä–∞–º–º.")
        await message.reply(profile_info, parse_mode='markdown')

    async def drug_command(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)

        if not user:
            self.db.create_user(user_id)
            user = self.db.get_user(user_id)

        if await self.check_banned(user, message):
            return

        current_time = datetime.now()
        drug_usage_timeout = timedelta(hours=1)
        minimum_drug_find_chance = 20
        drug_amount_range = (1, 10)

        last_use_time = datetime.fromisoformat(user[2]) if user[2] else None
        drug_count = user[1]

        if last_use_time and (current_time - last_use_time) < drug_usage_timeout:
            next_available_time = (current_time + drug_usage_timeout).strftime("%H:%M")
            await message.reply(
                f"‚ùå {message.from_user.first_name}, —Ç—ã —É–∂–µ –Ω—é—Ö–∞–ª(-–∞)!\n\n"
                f"üåø –í—Å–µ–≥–æ —Å–Ω—é—Ö–∞–Ω–æ `{drug_count} –≥—Ä–∞–º–º` –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞\n\n"
                f"‚è≥ –ü—Ä–∏—Ö–æ–¥–∏ –≤ {next_available_time}.",
                parse_mode='markdown')
        elif random.randint(0, 100) < minimum_drug_find_chance:
            await message.reply(f"üßÇ {message.from_user.first_name}, —Ç—ã –ø—Ä–æ—Å—ã–ø–∞–ª(-–∞) –≤–µ—Å—å –º–µ—Ñ—á–∏–∫!",
                                parse_mode='markdown')
            self.db.update_last_use_time(user_id, current_time.isoformat())
        else:
            next_available_time = (current_time + drug_usage_timeout).strftime("%H:%M")
            drug_count_to_add = random.randint(*drug_amount_range)
            self.db.update_drug_count(user_id, drug_count_to_add)
            await message.reply(
                f"üëç {message.from_user.first_name}, —Ç—ã –∑–∞–Ω—é—Ö–Ω—É–ª(-–∞) {drug_count_to_add} –≥—Ä–∞–º–º –º–µ—Ñ—á–∏–∫–∞!\n\n"
                f"üåø –í—Å–µ–≥–æ —Å–Ω—é—Ö–∞–Ω–æ `{drug_count + drug_count_to_add}` –≥—Ä–∞–º–º –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞\n\n"
                f"‚è≥ –ü—Ä–∏—Ö–æ–¥–∏ –≤ {next_available_time}.",
                parse_mode='markdown')

    async def top_command(self, message: types.Message):
        top_users = self.db.get_top_users()
        if not top_users:
            await message.reply('–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª –º–µ—Ñ.')
            return

        response = "üîù–¢–û–ü –õ–Æ–¢–´–• –ú–ï–§–ï–ù–î–†–û–ù–©–ò–ö–û–í –í –ú–ò–†–ïüîù:\n"
        for rank, (user_id, drug_count) in enumerate(top_users, start=1):
            if user_id == self.bot.id:
                continue
            user_info = await self.bot.get_chat(user_id)
            response += f"{rank}) {user_info.full_name}: {drug_count} –≥—Ä. –º–µ—Ñ–∞\n"
        await message.reply(response, parse_mode='markdown')

    async def take_command(self, message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        if await self.check_banned(user, message):
            return

        reply_msg = message.reply_to_message
        if not reply_msg:
            await message.reply('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ–µ–¥—Ä–æ–Ω.')
            return
        if reply_msg.from_user.id in [self.bot.id, message.from_user.id]:
            await message.reply(f'‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –º–µ—Ñ —É –±–æ—Ç–∞ –∏–ª–∏ —É —Å–µ–±—è')
            return

        target_user = self.db.get_user(reply_msg.from_user.id)
        if not target_user or not user:
            await message.reply('‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω—é—Ö–∞–ª –º–µ—Ñ –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return

        last_time = await state.get_data() or {'time': datetime.min}
        if datetime.now() - last_time['time'] < timedelta(days=1):
            await message.reply("‚ùå –ù–µ–ª—å–∑—è –ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ —Ç–∞–∫ —á–∞—Å—Ç–æ! –¢—ã —Å–º–æ–∂–µ—à—å —Å–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å.")
            return

        result = self.steal_drug(user, target_user)
        await message.reply(result, parse_mode='markdown')
        await state.set_data({'time': datetime.now()})

    def steal_drug(self, user, target_user):
        if target_user[1] < 1:
            return '‚ùå –£ –∂–µ—Ä—Ç–≤—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω—é—Ö–∞–Ω–Ω–æ–≥–æ –º–µ—Ñ–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –µ–≥–æ —Å–ø–∏–∑–¥–∏—Ç—å'
        if user[1] < 1:
            return '‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω—é—Ö–∞–Ω–Ω–æ–≥–æ –º–µ—Ñ–∞ –¥–ª—è —Ç–æ–≥–æ –ø–æ–π—Ç–∏ –∏—Å–∫–∞—Ç—å –∂–µ—Ä—Ç–≤—É'

        randomed = random.choice(['noticed', 'hit', 'pass'])
        if randomed == 'noticed':
            self.db.update_drug_count(user[0], -1)
            return '‚ùå *–ñ–µ—Ä—Ç–≤–∞ —Ç–µ–±—è –∑–∞–º–µ—Ç–∏–ª–∞*, –∏ —Ç—ã —Ä–µ—à–∏–ª —É–±–µ–∂–∞—Ç—å. –°–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. –ü–æ–∫–∞ —Ç—ã –±–µ–∂–∞–ª, ' \
                   '*—Ç—ã –ø–æ—Ç–µ—Ä—è–ª* `1 –≥—Ä.`'
        elif randomed == 'hit':
            self.db.update_drug_count(user[0], -1)
            return '‚ùå *–ñ–µ—Ä—Ç–≤–∞ —Ç–µ–±—è –∑–∞–º–µ—Ç–∏–ª–∞*, –∏ –ø–∏–∑–¥–∞–Ω—É–ª–∞ —Ç–µ–±—è –±—É—Ç—ã–ª–∫–æ–π –ø–æ –±–∞—à–∫–µ –±–ª—è. –°–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. ' \
                   '*–ñ–µ—Ä—Ç–≤–∞ –¥–æ—Å—Ç–∞–ª–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–∞—Ä–º–∞–Ω–∞* `1 –≥—Ä.`'

        self.db.update_drug_count(target_user[0], -1)
        self.db.update_drug_count(user[0], -1)
        username_mention = f"[{target_user['username']}](tg://user?id={target_user['id']})" if target_user[
            'username'] else target_user['full_name']
        return f"‚úÖ {user['full_name']} _—Å–ø–∏–∑–¥–∏–ª(-–∞) –æ–¥–∏–Ω –≥—Ä–∞–º –º–µ—Ñ–∞ —É_ {username_mention}!"

    async def casino(self, message: types.Message):
        args = message.text.split(maxsplit=1)
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        if await self.check_banned(user, message):
            return

        if len(args) < 2:
            await message.reply("üõë –£–∫–∞–∂–∏ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ç—ã –±—ã —Ö–æ—Ç–µ–ª —Å—ã–≥—Ä–∞—Ç—å! –ü—Ä–∏–º–µ—Ä:\n`/casino 40`",
                                parse_mode='markdown')
            return

        bet = int(args[1]) if args[1].isdigit() and int(args[1]) > 0 else None
        if bet is None:
            await message.reply("üõë –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è –¥–ª—è —Å—Ç–∞–≤–∫–∏!", parse_mode='markdown')
            return

        last_used = user[5]
        if last_used and (datetime.now() - datetime.fromisoformat(last_used)).total_seconds() < 30:
            await message.reply('‚è≥ –¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ *–∫—Ä—É—Ç–∏–ª –∫–∞–∑–∏–∫*, —Å–æ–ª–µ–≤–∞—è –æ–±–µ–∑—å—è–Ω–∞, *–ø–æ–¥–æ–∂–¥–∏ 30 —Å–µ–∫—É–Ω–¥ –ø–æ –±—Ä–∞—Ç—Å–∫–∏.*',
                                parse_mode='markdown')
            return

        multipliers = [2, 1.5, 1.25, 1.1, 0]
        weights = [1, 2, 3, 4, 90]
        multiplier = random.choices(multipliers, weights=weights)[0]
        win_amount = round(bet * multiplier, 1) if multiplier else 0

        if multiplier:
            await message.reply(
                f'ü§ë *–ï–±–∞—Ç—å —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ!* –¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ *—É–º–Ω–æ–∂–∏–ª–∞—Å—å* –Ω–∞ `{multiplier}`. –¢–≤–æ–π –≤—ã–∏–≥—Ä—ã—à: `{win_amount}` –≥—Ä.',
                parse_mode='markdown')
        else:
            await message.reply('üòî *–¢—ã –ø—Ä–æ–µ–±–∞–ª* —Å–≤–æ—é —Å—Ç–∞–≤–∫—É, *–Ω–µ—Ö—É–π –±—ã–ª–æ* –∫—Ä—É—Ç–∏—Ç—å –∫–∞–∑–∏–∫.', parse_mode='markdown')

        self.db.update_user(user_id, drug_count=user[1] + win_amount - bet, last_casino=datetime.now().isoformat())

    async def give_command(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        if await self.check_banned(user, message):
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏')
            return

        value = int(args[1]) if args[1].isdigit() and int(args[1]) > 0 else None
        if value is None:
            await message.reply('‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –∏ –Ω–µ —Ä–∞–≤–Ω—ã–º –Ω—É–ª—é')
            return

        reply_msg = message.reply_to_message
        if not reply_msg or reply_msg.from_user.id in [user_id, self.bot.id]:
            await message.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å')
            return

        recipient_id = reply_msg.from_user.id
        recipient = self.db.get_user(recipient_id)

        if not recipient:
            await message.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω!')
            return

        if user[1] < value:
            await message.reply(f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä–∞–º–º–æ–≤ –º–µ—Ñ–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏')
            return

        commission = round(value * 0.10)
        net_value = value - commission

        self.db.update_user(recipient_id, drug_count=recipient[1] + net_value)
        self.db.update_user(user_id, drug_count=user[1] - value)
        self.db.update_user(self.bot.id, drug_count=self.db.get_user(self.bot.id)[1] + commission)

        await message.reply(
            f"‚úÖ {message.from_user.first_name}, —Ç—ã –ø–µ—Ä–µ–¥–∞–ª(-–∞) {value} –≥—Ä. –º–µ—Ñ–∞ "
            f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {reply_msg.from_user.full_name}.\n"
            f"–ö–æ–º–∏—Å—Å–∏—è: `{commission}` –≥—Ä. –º–µ—Ñ–∞\n–ü–æ–ª—É—á–µ–Ω–æ `{net_value}` –≥—Ä. –º–µ—Ñ–∞.",
            parse_mode='markdown'
        )

    async def create_clan(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        if await self.check_banned(user, message):
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("üõë –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞–Ω–∞. –ü—Ä–∏–º–µ—Ä: `/clancreate –ö–ª–∞–Ω–ù–∞–∑–≤–∞–Ω–∏–µ`", parse_mode='markdown')
            return

        clan_name = args[1]
        clanexist = self.db.get_clan_by_name(clan_name)
        if clanexist:
            await message.reply('üõë –ö–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
            return

        if user[7]:
            await message.reply('üõë –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.')
            return

        if user[1] < 100:
            await message.reply("üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º `100` –≥—Ä.")
            return

        clan_id = random.randint(100000, 999999)
        self.db.create_clan(clan_id, clan_name, user_id, 0)
        self.db.update_user(user_id, clan_member=clan_id, drug_count=user[1] - 100)
        await message.reply(
            f"‚úÖ –ö–ª–∞–Ω `{clan_name}` —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∞–Ω–∞: `{clan_id}`. –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ "
            f"`100` –≥—Ä.",
            parse_mode='markdown')
        await self.bot.send_message(
            message.chat.id,
            f"#NEWCLAN\n\nclanid: `{clan_id}`\nclanname: `{clan_name}`\n"
            f"clanownerid: `{user_id}`",
            parse_mode='markdown'
        )

    async def deposit(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        if await self.check_banned(user, message):
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("üõë –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: `/deposit 100`", parse_mode='markdown')
            return

        cost = int(args[1]) if args[1].isdigit() else None
        if not cost or cost <= 0:
            await message.reply("‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.", parse_mode='markdown')
            return

        if user[7] == 0:
            await message.reply("üõë –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ", parse_mode='markdown')
            return

        clan = self.db.get_clan_by_id(user[7])
        if not clan:
            await message.reply("üõë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", parse_mode='markdown')
            return

        if cost > user[1]:
            await message.reply(f"üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: `{user[1]}` –≥—Ä.", parse_mode='markdown')
            return

        clan_balance = clan[3] + cost
        self.db.update_clan_balance_by_owner(clan[2], clan_balance)  # clan_owner_id
        self.db.update_user(user_id, drug_count=user[1] - cost)
        await message.reply(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞ `{clan[1]}` –Ω–∞ `{cost}` –≥—Ä.",
                            parse_mode='markdown')  # clan_name
        await self.bot.send_message(
            message.chat.id,
            f"#DEPOSIT\n\nclanname: `{clan[1]}`\namount: `{cost}`\n"
            f"userid: `{user_id}`\nfirstname: {message.from_user.first_name}\n\n"
            f"[mention](tg://user?id={user_id})",
            parse_mode='markdown'
        )

    async def withdraw(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        if await self.check_banned(user, message):
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply("üõë –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—É–º–º—É. –ü—Ä–∏–º–µ—Ä: `/withdraw 100`", parse_mode='markdown')
            return

        cost = int(args[1]) if args[1].isdigit() else None
        if not cost or cost <= 0:
            await message.reply("‚ùå –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.", parse_mode='markdown')
            return

        clan = self.db.get_clan_by_id(user[7])
        if not clan or user_id != clan[2]:
            await message.reply("üõë –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞ –∏–ª–∏ –∫–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode='markdown')
            return

        if cost > clan[3]:
            await message.reply(f"üõë –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞: `{clan[3]}` –≥—Ä.", parse_mode='markdown')
            return

        clan_balance = clan[3] - cost
        self.db.update_clan_balance_by_owner(user_id, clan_balance)
        self.db.update_user(user_id, drug_count=user[1] + cost)
        await message.reply(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ `{cost}` –≥—Ä. –º–µ—Ñ–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞–Ω–∞ `{clan[1]}`",
                            parse_mode='markdown')  # clan_name
        await self.bot.send_message(
            message.chat.id,
            f"#WITHDRAW\n\namount: `{cost}`\nclanname: `{clan[1]}`\n"
            f"userid: {user_id}\n\n[mention](tg://user?id={user_id})",
            parse_mode='markdown'
        )

    async def clan_top(self, message: types.Message):
        user = self.db.get_user(message.from_user.id)
        if await self.check_banned(user, message):
            return
        top_clans = self.db.get_top_clans()
        if top_clans:
            response = "üîù–¢–û–ü 10 –ú–ï–§–ï–î–†–û–ù–û–í–´–• –ö–ê–†–¢–ï–õ–ï–ô –í –ú–ò–†–ïüîù:\n" + "\n".join(
                f"{index}) *{clan[0]}*  `{clan[1]} –≥—Ä. –º–µ—Ñ–∞`"
                for index, clan in enumerate(top_clans, start=1)
            )
            await message.reply(response, parse_mode='markdown')
        else:
            await message.reply('üõë –ï—â—ë –Ω–∏ –æ–¥–∏–Ω –∫–ª–∞–Ω –Ω–µ –ø–æ–ø–æ–ª–Ω–∏–ª —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.')

    async def clanbalance(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        if await self.check_banned(user, message):
            return
        clan_id = user[7]
        if not clan_id:
            await message.reply(f"üõë –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ", parse_mode='markdown')
            return
        clan_balance = self.db.get_clan_balance(clan_id)
        clan_name = self.db.get_clan_name(clan_id)
        await message.reply(f'‚úÖ –ë–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞ *{clan_name}* - `{clan_balance}` –≥—Ä.', parse_mode='markdown')

    async def clanwar(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        if await self.check_banned(user, message):
            return

        clan_id = user[7]
        if not clan_id:
            await message.reply(f"üõë *–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ*", parse_mode='markdown')
            return

        clan = self.db.get_clan_by_id(clan_id)
        clan_name = clan[1]
        if user_id != clan[2]:
            await message.reply(f"üõë *–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞*", parse_mode='markdown')
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply(f"üõë *–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∞–Ω–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–æ–π–Ω—ã*", parse_mode='markdown')
            return
        target_clan_id = args[1]

        target_clan = self.db.get_clan_by_id(target_clan_id)
        if not target_clan:
            await message.reply(f"üõë *–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∞–Ω —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º*", parse_mode='markdown')
            return
        target_clan_name = target_clan[1]
        await message.reply(f"*–ö–ª–∞–Ω {clan_name} –Ω–∞—á–∞–ª –≤–æ–π–Ω—É —Å {target_clan_name}!*", parse_mode='markdown')

        chats = self.db.get_all_chats()
        for chat_id in chats:
            try:
                await self.bot.send_message(chat_id[0],
                                            f"*–ö–ª–∞–Ω {clan_name} –Ω–∞—á–∞–ª –≤–æ–π–Ω—É —Å {target_clan_name}!*",
                                            parse_mode='markdown')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}")

    async def clan_owner(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        if await self.check_banned(user, message):
            return

        clan_id = user[7]
        if not clan_id:
            await message.reply(f"üõë *–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ*", parse_mode='markdown')
            return

        clan = self.db.get_clan_by_id(clan_id)
        if user_id != clan[2]:
            await message.reply(f"üõë *–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞*", parse_mode='markdown')
            return
        if message.reply_to_message:
            new_owner_id = message.reply_to_message.from_user.id
        elif len(message.text.split()) >= 2:
            new_owner_id = int(message.text.split()[1])
        else:
            await message.reply(f"üõë *–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–ª–∞–Ω–∞*", parse_mode='markdown')
            return
        new_owner = self.db.get_user(new_owner_id)
        if not new_owner:
            await message.reply(f"üõë *–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º*",
                                parse_mode='markdown')
            return
        self.db.update_clan_owner(clan_id, new_owner_id)
        await message.reply(f"‚úÖ *–í—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–ª–∞–Ω–∞!*", parse_mode='markdown')

    async def claninfo(self, message: types.Message):
        user = self.db.get_user(message.from_user.id)
        if await self.check_banned(user, message):
            return

        clan_id = user[7]
        if not clan_id:
            await message.reply(f"üõë –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ", parse_mode='markdown')
            return

        clan = self.db.get_clan_by_id(clan_id)
        clan_balance = clan[3]
        clan_name = clan[1]
        clan_owner_id = clan[2]
        clan_owner = await self.bot.get_chat(clan_owner_id)
        await message.reply(
            f"üë• –ö–ª–∞–Ω: `{clan_name}`\n"
            f"üëë –í–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞: [{clan_owner.first_name}](tg://user?id={clan_owner_id})\n"
            f"üåø –ë–∞–ª–∞–Ω—Å –∫–ª–∞–Ω–∞ `{clan_balance}` –≥—Ä.",
            parse_mode='markdown'
        )

    async def clanmembers(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)

        if not user or await self.check_banned(user, message) or not user[7]:
            await message.reply(f"üõë –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", parse_mode='markdown')
            return

        clan_members = self.db.get_clan_members(user[7])
        if not clan_members:
            await message.reply(f"üõë –í –∫–ª–∞–Ω–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", parse_mode='markdown')
            return

        clan_name = self.db.get_clan_by_id(user[7])[1]
        response = f"üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞ *{clan_name}*:\n"
        for counter, member in enumerate(clan_members, 1):
            member_info = await self.bot.get_chat(member[0])
            member_role = "üëë" if member[0] == user[7] else ""
            response += f"{counter}) *{member_info.full_name}* {member_role}\n"
        await message.reply(response, parse_mode='markdown')

    async def claninvite(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        clan_id = user[7] if user else None
        if await self.check_banned(user, message) or not clan_id:
            return

        clan = self.db.get_clan_by_id(clan_id)
        if user_id != clan[2]:
            await message.reply(f"üõë –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", parse_mode='markdown')
            return

        reply_msg = message.reply_to_message
        if not reply_msg:
            await message.reply(f"üõë –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å",
                                parse_mode='markdown')
            return

        if reply_msg.from_user.id == self.bot.id:
            await message.reply(f'‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –∫–ª–∞–Ω', parse_mode='markdown')
            return

        invited_user_id = reply_msg.from_user.id
        invited_user = self.db.get_user(invited_user_id)
        if invited_user[7]:
            await message.reply(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ", parse_mode='markdown')
            return

        if invited_user[8]:
            await message.reply(f"üõë –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", parse_mode='markdown')
            return

        self.db.update_user_clan_invite(invited_user_id, clan_id)
        await message.reply(
            f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reply_msg.from_user.first_name} –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –∫–ª–∞–Ω {clan[1]}',
            parse_mode='markdown'
        )

    async def clankick(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        clan_id = user[7] if user else None
        if await self.check_banned(user, message) or not clan_id:
            return

        clan = self.db.get_clan_by_id(clan_id)
        if user_id != clan[2]:
            await message.reply(f"üõë –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç –∏—Å–∫–ª—é—á–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", parse_mode='markdown')
            return

        reply_msg = message.reply_to_message
        if not reply_msg:
            await message.reply(f"üõë –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å",
                                parse_mode='markdown')
            return

        kicked_user_id = reply_msg.from_user.id
        self.db.remove_user_from_clan(kicked_user_id)
        await message.reply(
            f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reply_msg.from_user.first_name} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–ª–∞–Ω–∞ {clan[1]}',
            parse_mode='markdown'
        )

    async def clanleave(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        clan_id = user[7] if user else None
        if await self.check_banned(user, message) or not clan_id:
            return
        clan = self.db.get_clan_by_id(clan_id)
        if user_id == clan[2]:
            await message.reply(f"üõë –í–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –µ–≥–æ –ø–æ–∫–∏–Ω—É—Ç—å", parse_mode='markdown')
            return

        self.db.remove_user_from_clan(user_id)
        await message.reply(f'‚úÖ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω {clan[1]}', parse_mode='markdown')

    async def clandisband(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        clan_id = user[7] if user else None
        if await self.check_banned(user, message) or not clan_id:
            return
        clan = self.db.get_clan_by_id(clan_id)
        if user_id != clan[2]:
            await message.reply(f"üõë –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞ –º–æ–∂–µ—Ç –µ–≥–æ —Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å", parse_mode='markdown')
            return

        self.db.delete_clan(clan_id)
        await message.reply(f'‚úÖ –ö–ª–∞–Ω {clan[1]} —Ä–∞—Å–ø—É—â–µ–Ω', parse_mode='markdown')

    async def clanaccept(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        if await self.check_banned(user, message):
            return
        if user[8]:
            self.db.update_user(user_id, clan_member=user[8], clan_invite=None)
            clan_name = self.db.get_clan_by_id(user[8])[1]
            await message.reply(f'‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω {clan_name}', parse_mode='markdown')
        else:
            await message.reply('üõë –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π', parse_mode='markdown')

    async def clandecline(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        if await self.check_banned(user, message):
            return
        if user[8]:
            clan_name = self.db.get_clan_by_id(user[8])[1]
            self.db.update_user(user_id, clan_invite=None)
            await message.reply(f'‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω {clan_name}', parse_mode='markdown')
        else:
            await message.reply('üõë –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π', parse_mode='markdown')

    async def drug_find(self, message: types.Message):
        user = self.db.get_user(message.from_user.id)
        user_id = message.from_user.id
        if await self.check_banned(user, message):
            return
        drug_count = user[1] if user else 0
        last_find_time = user[6] if user and user[6] else datetime.min.isoformat()

        if (datetime.now() - datetime.fromisoformat(last_find_time)).total_seconds() < 43200:
            await message.reply('‚è≥ –¢—ã –Ω–µ–¥–∞–≤–Ω–æ *—Ö–æ–¥–∏–ª –∑–∞ –∫–ª–∞–¥–æ–º, –ø–æ–¥–æ–∂–¥–∏ 12 —á–∞—Å–æ–≤.*', parse_mode='markdown')
            return
        else:
            if random.randint(1, 100) > 50:
                count = random.randint(1, 10)
                if user:
                    self.db.update_user(user_id, drug_count=drug_count + count)
                else:
                    self.db.add_user(user_id, drug_count=count)
                self.db.update_user(user_id, last_use_time='2006-02-20 12:45:37.666666',
                                    last_find=datetime.now().isoformat())
                await self.bot.send_message(
                    message.chat.id,
                    f"#FIND #WIN\n\nfirst\\_name: `{message.from_user.first_name}`\n"
                    f"count: `{count}`\ndrug\\_count: `{drug_count + count}`\n\n"
                    f"[mention](tg://user?id={user_id})",
                    parse_mode='markdown'
                )
                await message.reply(
                    f"üëç {message.from_user.first_name}, —Ç—ã –ø–æ—à—ë–ª –≤ –ª–µ—Å –∏ *–Ω–∞—à–µ–ª –∫–ª–∞–¥*, —Ç–∞–º –ª–µ–∂–∞–ª–æ `{count} –≥—Ä.` "
                    f"–º–µ—Ñ—á–∏–∫–∞!\nüåø –¢–≤–æ–µ –≤—Ä–µ–º—è –∫–æ–º–∞–Ω–¥—ã /drug –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
                    parse_mode='markdown')
            elif random.randint(1, 100) <= 50:
                count = random.randint(1, round(drug_count))
                self.db.update_user(user_id, drug_count=drug_count - count)
                await self.bot.send_message(
                    message.chat.id,
                    f"#FIND #LOSE\n\nfirst\\_name: `{message.from_user.first_name}`\n"
                    f"count: `{count}`\ndrug\\_count: `{drug_count - count}`\n\n"
                    f"[mention](tg://user?id={user_id})",
                    parse_mode='markdown'
                )
                await message.reply(
                    f"‚ùå *{message.from_user.first_name}*, —Ç–µ–±—è *—Å–ø–∞–ª–∏–ª –º–µ–Ω—Ç* –∏ *–¥–∞–ª —Ç–µ–±–µ –ø–æ –µ–±–∞–ª—É*\nüåø –¢–µ–±–µ –Ω—É–∂–Ω–æ "
                    f"–æ—Ç–∫—É–ø–∏—Ç—å—Å—è, –º–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–∏–ª –≤–∑—è—Ç–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ `{count} –≥—Ä.`\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ "
                    f"*12 —á–∞—Å–æ–≤.*",
                    parse_mode='markdown')

    async def banuser_command(self, message: types.Message):
        user = self.db.get_user(message.from_user.id)
        if user and user[3]:
            ban_user_id = message.reply_to_message.from_user.id if message.reply_to_message else None
            if ban_user_id:
                self.db.update_user(ban_user_id, is_banned=1)
                await message.reply(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: `{ban_user_id}` –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", parse_mode='markdown')
            else:
                await message.reply('–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.')
        else:
            await message.reply('üö® MONKEY ALARM')

    async def unbanuser_command(self, message: types.Message):
        user = self.db.get_user(message.from_user.id)
        if user and user[3]:
            ban_user_id = message.reply_to_message.from_user.id if message.reply_to_message else None
            if ban_user_id:
                self.db.update_user(ban_user_id, is_banned=0)
                await message.reply(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: `{ban_user_id}` –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", parse_mode='markdown')
            else:
                await message.reply('–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.')
        else:
            await message.reply('üö® MONKEY ALARM')

    async def setdrugs_command(self, message: types.Message):
        admin_user = self.db.get_user(message.from_user.id)
        if not admin_user or admin_user[3] != 1:
            await message.reply('üö® –í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.')
            return

        reply_msg = message.reply_to_message
        if not reply_msg:
            await message.reply('üö® –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º.')
            return

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            await message.reply('üö® –û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º.')
            return

        try:
            drug_amount = int(args[1])
            target_user_id = reply_msg.from_user.id
            self.db.update_user(target_user_id, drug_count=drug_amount)
            await message.reply(
                f'‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {reply_msg.from_user.full_name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {drug_amount}.')
        except ValueError:
            await message.reply('üö® –û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.')

    async def usercount(self, message: types.Message):
        user = self.db.get_user(message.from_user.id)
        if user and user[3]:
            user_count = len(self.db.get_top_users(limit=None))
            await message.reply(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {user_count}')
        else:
            await message.reply('üö® MONKEY ALARM')

    async def cmd_broadcast_start(self, message: types.Message):
        user_id = message.from_user.id
        user = self.db.get_user(user_id)
        if not user or user[3] != 1:
            await message.reply('üö® MONKEY ALARM')
            return

        reply = message.reply_to_message
        if not reply:
            await message.reply('–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
            return

        all_chats = self.db.get_all_chats()
        await message.reply('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É')
        for chat_id in all_chats:
            try:
                if reply.photo:
                    photo_id = reply.photo[-1].file_id
                    caption = reply.caption if reply.caption else ''
                    await self.bot.send_photo(chat_id, photo_id, caption=caption, parse_mode='markdown')
                else:
                    await self.bot.send_message(chat_id, reply.text, parse_mode='markdown')
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}: {e}")
